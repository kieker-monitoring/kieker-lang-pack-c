#ifndef _monitoring_ah_
#define _monitoring_ah_

#include <string>

#include <kieker.h>
#include "../kieker_probe_events.h"
#include "../../controller/kieker_trace.h"
#include "controlflow.h"

aspect monitoringAspect {

    public:
    pointcut includePC() = execution("% ...::%(...)");
    //pointcut excludePC() = call("% std::%(...)") || call("% init_aspect()") || call("% before_aspect(...)") || call("% after_aspect(...)") || call("% after_aspect(...)");
    pointcut excludePC() = call("void init_aspect()");
    //pointcut excludePC() = call("void init_aspect()") || call("% ...::printf(...)");

    pointcut monitoringPC() = execution("% ...::%(...)");
    //pointcut monitoringPC() = call("int fib_%(...)") || call("int power(...)") || call("void call(...)");
    //pointcut monitoringPC() = !excludePC();
    //pointcut monitoringPC() = includePC() && !excludePC();

    monitoringAspect() {
    	kieker_probe_aspect_controlflow_initialize();
    }

    advice monitoringPC() : around() {
        OperationExecutionRecord record;
        kieker_trace_t* trace;

        trace = kieker_probe_aspect_controlflow_before(&record);

        tjp->proceed();

        kieker_probe_aspect_controlflow_after(trace, &record);

        std::string file = JoinPoint::filename();
        std::string sig = JoinPoint::signature();
        std::string operation_signature;

        std::string name = file.substr(0, file.find_last_of("."));
        operation_signature = name.append("::").append(sig);

        // send data
        record.operation_signature = (char*) opsig.c_str();

        kieker_probe_aspect_controlflow_after2(data, &record);
    }
};

#endif
